(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),i=(t(0),t(108)),l={title:"Integer Overflow or Wraparound Vulnerability",sidebar_label:"Integer Overflow or Wraparound Vulnerability"},o={unversionedId:"security_awareness/languages/C/IntegerOverflow",id:"security_awareness/languages/C/IntegerOverflow",isDocsHomePage:!1,title:"Integer Overflow or Wraparound Vulnerability",description:"Description",source:"@site/docs/security_awareness/languages/C/IntegerOverflow.md",slug:"/security_awareness/languages/C/IntegerOverflow",permalink:"/docs/security_awareness/languages/C/IntegerOverflow",version:"current",sidebar_label:"Integer Overflow or Wraparound Vulnerability",sidebar:"someSidebar",previous:{title:"Double-Free Vulnerability",permalink:"/docs/security_awareness/languages/C/DoubleFree"},next:{title:"Out Of Bounds",permalink:"/docs/security_awareness/languages/C/OutOfBounds"}},c=[{value:"Description",id:"description",children:[]},{value:"Vulnerable Code Example",id:"vulnerable-code-example",children:[]},{value:"Mitigation 1",id:"mitigation-1",children:[]},{value:"Mitigation 2",id:"mitigation-2",children:[]},{value:"Vulnerable Code Example",id:"vulnerable-code-example-1",children:[]},{value:"Mitigation",id:"mitigation",children:[]},{value:"Risk Assessment",id:"risk-assessment",children:[]},{value:"References",id:"references",children:[]}],s={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"If an integer expression involving an operation is compared to or assigned to a larger integer size, that integer expression should be evaluated in that larger size by explicitly casting one of the operands."),Object(i.b)("h2",{id:"vulnerable-code-example"},"Vulnerable Code Example"),Object(i.b)("p",null,"This code example is vulnerable on systems where ",Object(i.b)("inlineCode",{parentName:"p"},"size_t")," is an unsigned 32-bit value and long long is a 64-bit value. In this example, the developer tests for wrapping by comparing ",Object(i.b)("inlineCode",{parentName:"p"},"SIZE_MAX")," to length + ",Object(i.b)("inlineCode",{parentName:"p"},"BLOCK_HEADER_SIZE"),". Because length is declared as size_t, the addition is performed as a 32-bit operation and can result in wrapping. The comparison with ",Object(i.b)("inlineCode",{parentName:"p"},"SIZE_MAX")," will always test false. If any wrapping occurs, ",Object(i.b)("inlineCode",{parentName:"p"},"malloc()")," will allocate insufficient space for mBlock, which can lead to a subsequent buffer overflow."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),"#include <stdlib.h>\n#include <stdint.h>  /* For SIZE_MAX */\n  \nenum { BLOCK_HEADER_SIZE = 16 };\n \nvoid *AllocateBlock(size_t length) {\n  struct memBlock *mBlock;\n \n  if (length + BLOCK_HEADER_SIZE > (unsigned long long)SIZE_MAX)\n    return NULL;\n  mBlock = (struct memBlock *)malloc(\n    length + BLOCK_HEADER_SIZE\n  );\n  if (!mBlock) { return NULL; }\n  /* Fill in block header and return data portion */\n \n  return mBlock;\n}\n")),Object(i.b)("h2",{id:"mitigation-1"},"Mitigation 1"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),"#include <stdlib.h>\n#include <stdint.h>\n \n \nenum { BLOCK_HEADER_SIZE = 16 };\n  \nvoid *AllocateBlock(size_t length) {\n  struct memBlock *mBlock;\n \n  if ((unsigned long long)length + BLOCK_HEADER_SIZE > SIZE_MAX) {\n    return NULL;\n  }\n  mBlock = (struct memBlock *)malloc(\n    length + BLOCK_HEADER_SIZE\n  );\n  if (!mBlock) { return NULL; }\n  /* Fill in block header and return data portion */\n \n  return mBlock;\n}\n")),Object(i.b)("p",null,"This test for wrapping is effective only when the sizeof(unsigned long long) > ",Object(i.b)("inlineCode",{parentName:"p"},"sizeof(size_t)"),". If both ",Object(i.b)("inlineCode",{parentName:"p"},"size_t")," and unsigned long long types are represented as 64-bit unsigned values, the result of the addition operation may not be representable as an unsigned long long value."),Object(i.b)("h2",{id:"mitigation-2"},"Mitigation 2"),Object(i.b)("p",null,"In this compliant solution, length is subtracted from ",Object(i.b)("inlineCode",{parentName:"p"},"SIZE_MAX"),", ensuring that wrapping cannot occur."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),"#include <stdlib.h>\n#include <stdint.h>\n  \nenum { BLOCK_HEADER_SIZE = 16 };\n \nvoid *AllocateBlock(size_t length) {\n  struct memBlock *mBlock;\n \n  if (SIZE_MAX - length < BLOCK_HEADER_SIZE) return NULL;\n  mBlock = (struct memBlock *)malloc(\n    length + BLOCK_HEADER_SIZE\n  );\n  if (!mBlock) { return NULL; }\n  /* Fill in block header and return data portion */\n \n  return mBlock;\n}\n")),Object(i.b)("h2",{id:"vulnerable-code-example-1"},"Vulnerable Code Example"),Object(i.b)("p",null,"In this vulnerable code example, the developer attempts to prevent wrapping by allocating an unsigned long long integer called alloc and assigning it the result from ",Object(i.b)("inlineCode",{parentName:"p"},"cBlocks * 16"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),"\n#include <stdlib.h>\n#include <limits.h>\n  \nvoid *AllocBlocks(size_t cBlocks) {\n  if (cBlocks == 0) { return NULL; }\n  unsigned long long alloc = cBlocks * 16;\n  return (alloc < UINT_MAX) ? malloc(cBlocks * 16) : NULL;\n}\n")),Object(i.b)("h2",{id:"mitigation"},"Mitigation"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),'#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n  \nstatic_assert(\n  CHAR_BIT * sizeof(unsigned long long) >=\n  CHAR_BIT * sizeof(size_t) + 4,\n  "Unable to detect wrapping after multiplication"\n);\n \nvoid *AllocBlocks(size_t cBlocks) {\n  if (cBlocks == 0) return NULL;\n  unsigned long long alloc = (unsigned long long)cBlocks * 16;\n  return (alloc < UINT_MAX) ? malloc(cBlocks * 16) : NULL;\n}\n')),Object(i.b)("p",null,"Note that this code does not prevent wrapping unless the unsigned long long type is at least 4 bits larger than ",Object(i.b)("inlineCode",{parentName:"p"},"size_t"),"."),Object(i.b)("h2",{id:"risk-assessment"},"Risk Assessment"),Object(i.b)("p",null,"Failure to cast integers before comparing or assigning them to a larger integer size can result in software vulnerabilities that can allow the execution of arbitrary code by an attacker with the permissions of the vulnerable process."),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://cwe.mitre.org/data/definitions/190.html"}),"CWE-190: Integer Overflow or Wraparound")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IEC9899-2011"}),"Programming Languages\u2014C, 3rd ed (ISO/IEC 9899:2011). Geneva, Switzerland: ISO, 2011."))))}u.isMDXComponent=!0},108:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return g}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,g=p["".concat(l,".").concat(b)]||p[b]||d[b]||i;return t?a.a.createElement(g,o(o({ref:n},s),{},{components:t})):a.a.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=b;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);